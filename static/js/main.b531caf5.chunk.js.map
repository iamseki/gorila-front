{"version":3,"sources":["assets/logo.svg","pages/Dashboard/date-picker-options.ts","components/Header/styles.ts","components/Header/index.tsx","pages/Dashboard/styles.ts","services/api.ts","components/Chart/index.tsx","pages/Dashboard/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["module","exports","minimumDate","year","month","day","maximumDate","defaultInvestmentDate","defaultCurrentDate","Container","styled","div","size","Header","src","Logo","alt","Title","h3","InputContainer","section","Input","total","InputCDBRate","input","CalculateBox","ComputedBox","ComputedResultBox","api","axios","create","baseURL","Chart","data","ScatterChart","width","height","margin","top","right","bottom","left","CartesianGrid","XAxis","type","dataKey","name","YAxis","unit","ZAxis","range","Tooltip","cursor","strokeDasharray","Legend","Scatter","className","fill","line","shape","formatStringDate","date","Dashboard","useState","investmentDay","setInvestmentDay","currentDay","setCurrentInvestmentDay","computedCDB","setComputedCDB","cdbRate","setCDBRate","useEffect","a","requestBody","investmentDate","currentDate","setIsSending","post","firstLoad","isSending","sendRequest","useCallback","e","preventDefault","value","onChange","inputPlaceholder","shouldHighlightWeekends","calendarPopperPosition","Number","target","onClick","CircularProgress","color","arr","length","unitPrice","getLastComputedUnitPrice","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b531caf5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.12a42cb5.svg\";","export const minimumDate = {\n  year: 2010,\n  month: 1,\n  day: 3\n};\n\nexport const maximumDate = {\n  year: 2019,\n  month: 12,\n  day: 2\n}\n\nexport const defaultInvestmentDate = {\n  year: 2016,\n  month: 11,\n  day: 14,\n};\n\nexport const defaultCurrentDate = {\n  year: 2016,\n  month: 12,\n  day: 26,\n}","import styled from 'styled-components';\n\ninterface ContainerProps {\n  size?: 'small' | 'large';\n}\n\nexport const Container = styled.div<ContainerProps>`\n  background: #5636d3;\n  padding: 30px 0;\n\n  header {\n    width: 1120px;\n    margin: 0 auto;\n    padding: ${({ size }) => (size === 'small' ? '0 20px ' : '0 20px 150px')};\n    display: flex;\n    align-content: center;\n    strong {\n      color: #FFF;\n      align-self: center;\n      margin-left: 7px;\n    }\n    img {\n      width: 48px;\n      height: 48px;\n    }\n  }\n`;\n","import React from 'react';\n\nimport { Container } from './styles';\n\nimport Logo from '../../assets/logo.svg';\n\ninterface HeaderProps {\n  size?: 'small' | 'large';\n}\n\nconst Header: React.FC<HeaderProps> = ({ size = 'large' }: HeaderProps) => (\n  <Container size={size}>\n    <header>\n      <img src={Logo} alt=\"CDB Unit Calculator\" />\n      <strong>CDB Calculator</strong>\n    </header>\n  </Container>\n);\n\nexport default Header;\n","import styled from 'styled-components';\n\ninterface InputProps {\n  total?: boolean;\n}\n\nexport const Container = styled.div`\n  width: 100%;\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 40px 20px;\n`;\n\nexport const Title = styled.h3`\n  font-size: 16px;\n  color: #3a3a3a;\n`;\n\nexport const InputContainer = styled.section`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 32px;\n  margin-top: -200px;\n`;\n\nexport const Input = styled.div`\n  display:flex;\n  flex-direction: column;\n  align-items: center;\n  background: ${({ total }: InputProps): string => (total ? '#FF872C' : '#fff')};\n  padding: 20px 30px;\n  border-radius: 5px;\n  color: ${({ total }: InputProps): string => (total ? '#fff' : '#363F5F')};\n`;\n\nexport const InputCDBRate = styled.input`\nwidth: 50%;\n`\n\nexport const CalculateBox = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items:center;\nbutton {\n  padding: 7px;\n  border-radius: 17px;\n  transition: opacity 0.5s;\n  background-color: #50c878;\n\n  &:hover{\n    opacity: 50%;\n  }\n}\n`\n\nexport const ComputedBox = styled.div`\n  margin-top: 38px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const ComputedResultBox = styled.div`\n  display: flex;\n  align-items: center;\n  align-content: center;\n  p {\n    margin: 0 32px;\n  }\n`","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV == \"development\" ? 'http://localhost:8080' : \"https://gorila-challenge-api.herokuapp.com\",\n});\n\nexport default api;\n","import React from 'react';\nimport { XAxis, ScatterChart, Tooltip, YAxis, ZAxis, Legend, Scatter, CartesianGrid } from 'recharts';\n\n\ninterface ComputedData {\n  unitPrice: number\n  date: string\n}\n\ninterface GraphProps {\n  data: ComputedData[];\n}\n\nconst Chart: React.FC<GraphProps> = ({ data }: GraphProps) => (\n  <ScatterChart\n    width={750}\n    height={400}\n    margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n  >\n    <CartesianGrid />\n    <XAxis type=\"category\" dataKey={\"date\"} name=\"date\" />\n    <YAxis type=\"number\" dataKey={\"unitPrice\"} name=\"unitPrice\" unit=\"R$\" />\n    <ZAxis range={[100]} />\n    <Tooltip cursor={{ strokeDasharray: \"2 2\" }} />\n    <Legend />\n    <Scatter className=\"scatter\" name=\"CDB Unit Prices per Date\"data={data} fill=\"#8884d8\" line shape=\"circle\" />\n  </ScatterChart>\n);\n\nexport default Chart;\n\n","import 'react-modern-calendar-datepicker/lib/DatePicker.css';\nimport DatePicker, { DayValue, Day } from 'react-modern-calendar-datepicker';\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { defaultCurrentDate, defaultInvestmentDate, maximumDate, minimumDate } from './date-picker-options'\nimport Header from '../../components/Header';\nimport { Container, InputContainer, Input, Title, InputCDBRate, CalculateBox, ComputedBox, ComputedResultBox } from './styles';\nimport api from '../../services/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Chart from '../../components/Chart';\n\ninterface CalculateCDBRequest {\n  investmentDate: string\n  cdbRate: number\n  currentDate: string\n}\n\ninterface ComputedUnitResponse {\n  unitPrice: number\n  date: string\n}\n\nconst formatStringDate = (date: Day): string => `${date.year}-${date.month}-${date.day}`\nconst getLastComputedUnitPrice = (arr: ComputedUnitResponse[]): number => arr[arr?.length - 1]?.unitPrice ?? 0\n\nconst Dashboard: React.FC = () => {\n  const [investmentDay, setInvestmentDay] = useState<DayValue>(defaultInvestmentDate);\n  const [currentDay, setCurrentInvestmentDay] = useState<DayValue>(defaultCurrentDate);\n  const [computedCDB, setComputedCDB] = useState<ComputedUnitResponse[]>([]);\n  const [cdbRate, setCDBRate] = useState<number>(103.5)\n\n  useEffect(() => {\n    const firstLoad = async () => {\n      const requestBody: CalculateCDBRequest = {\n        cdbRate,\n        investmentDate: formatStringDate(investmentDay as Day),\n        currentDate: formatStringDate(currentDay as Day)\n      }\n      setIsSending(true)\n      const { data } = await api.post<ComputedUnitResponse[]>('api/v1/calculate/cdb', requestBody)\n      setIsSending(false)\n      setComputedCDB(data)\n    }\n\n    firstLoad()\n  },[])\n\n  const [isSending, setIsSending] = useState(false)\n  const sendRequest = useCallback(async (e) => {\n    e.preventDefault()\n    if (isSending) return\n    setIsSending(true)\n\n    const requestBody: CalculateCDBRequest = {\n      cdbRate,\n      investmentDate: formatStringDate(investmentDay as Day),\n      currentDate: formatStringDate(currentDay as Day)\n    }\n    const { data } = await api.post<ComputedUnitResponse[]>('api/v1/calculate/cdb', requestBody)\n\n    setComputedCDB(data)\n    setIsSending(false)\n  }, [isSending, investmentDay, currentDay, cdbRate])\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <InputContainer>\n          <Input>\n            <DatePicker\n              value={investmentDay}\n              onChange={setInvestmentDay}\n              inputPlaceholder=\"Select investment date\"\n              shouldHighlightWeekends\n              calendarPopperPosition=\"bottom\"\n              maximumDate={maximumDate}\n              minimumDate={minimumDate}\n            />\n            <Title>Investment Date</Title>\n          </Input>\n          <Input>\n            <DatePicker\n              value={currentDay}\n              onChange={setCurrentInvestmentDay}\n              inputPlaceholder=\"Select current date\"\n              shouldHighlightWeekends\n              calendarPopperPosition=\"bottom\"\n              maximumDate={maximumDate}\n              minimumDate={minimumDate}\n            />\n            <Title>Current Date</Title>\n          </Input>\n          <Input>\n            <InputCDBRate value={cdbRate} onChange={e => setCDBRate(Number(e.target.value))} type=\"number\" />\n            <CalculateBox>\n              <p>CDB Rate</p>\n              <button type=\"button\" onClick={sendRequest}>Compute</button>\n            </CalculateBox>\n          </Input>\n        </InputContainer>\n        <ComputedBox>\n          {\n            isSending ?\n              <CircularProgress color=\"secondary\" /> :\n              <>\n                <ComputedResultBox>\n                  <p>Date: {formatStringDate(currentDay as Day)}</p>\n                  <p>Unit Price: <strong>{getLastComputedUnitPrice(computedCDB)} R$</strong></p>\n                </ComputedResultBox>\n                <Chart data={computedCDB} />\n              </>\n          }\n        </ComputedBox>\n      </Container>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #F0F2F5 ;\n    -webkit-font-smoothing: antialiased\n  }\n\n  body, input, button {\n    font: 16px \"Poppins\", sans-serif;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport Dashboard from './pages/Dashboard';\n\n\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n  <>\n    <GlobalStyle />\n    <Dashboard/>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}